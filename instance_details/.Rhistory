library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
Amazon_EC2_Instance_Comparison <- read_csv("Documents/AutomatedBayesCloudSelection/Amazon EC2 Instance Comparison.csv")
View(Amazon_EC2_Instance_Comparison)
dataset <- Amazon_EC2_Instance_Comparison
rm(Amazon_EC2_Instance_Comparison)
test <- as.numeric(dataset$Memory)
test <- as.numeric(split(dataset$Memory)[1])
test <- as.numeric(split(dataset$Memory, " ")[1])
test <- as.numeric(vapply(dataset$Memory, split(" ")[1]))
split(dataset$Memory, " ")
dataset$Memory
?split
strsplit(dataset$Memory, " ")
lapply(strsplit(dataset$Memory, function(l) l[1])
)
lapply(strsplit(dataset$Memory, function(l) l[1]))
lapply(strsplit(dataset$Memory, function(l) l[[1]]))
lapply(strsplit(dataset$Memory, function(l) return(l[1])))
?lapply
memories <- strsplit(dataset$Memory, " ")
memories
lapply(memories, function(x) x[1])
memories <- lapply(memories, function(x) x[1])
memories <- unlist(memories)
memories
dataset$Memory <- memories
dataset$Memory
dataset$Memory <- as.numeric(Memory)
dataset$Memory <- as.numeric(dataset$Memory)
View(dataset)
ecu <- strsplit(dataset$`Compute Units (ECU)`, " ")
ecuvals <- lapply(ecu, function(x) x[1])
ecuvals
ecuvals <- unlist(ecuvals)
ecuvals
ecuvals <- as.numeric(ecuvals)
ecuvals
dataset$`Compute Units (ECU)` <- ecuvals
first.num <- function(vals) {
vals <- strsplit(vals, " ")
vals <- lapply(vals, function(x) x[1])
vals <- unlist(vals)
return(vals)
}
vc <- first.num(dataset$vCPUs)
vc
dataset$vCPUs <- vc
first.num <- function(vals) {
vals <- strsplit(vals, " ")
vals <- lapply(vals, function(x) x[1])
vals <- unlist(vals)
return(as.numeric(vals))
}
dataset$vCPUs <- as.numeric(vc)
dataset$GPUs
dataset$FPGAs
ecuper <- first.num(dataset$`ECU per vCPU`)
ecuper
dataset$`ECU per vCPU` <- ecuper
dataset$`Physical Processor`
dataset$`Physical Processor` <- as.factor(dataset$`Physical Processor`)
levels(dataset$`Physical Processor`)
dataset$Burstable <- dataset$`ECU per vCPU`
is.na(dataset$Burstable)
dataset$Burstable <- is.na(dataset$Burstable)
View(dataset)
?grep
cs <- dataset$`Clock Speed(GHz)`
grep("* GHz", cs)
first.no.num <- function(vals) {
vals <- strsplit(vals, ".")
vals <- lapply(vals, function(x) x[1])
vals <- unlist(vals)
return(as.fact)
}
mods <- first.no.num(dataset$`API Name`)
first.no.num <- function(vals) {
vals <- strsplit(vals, ".")
vals <- lapply(vals, function(x) x[1])
vals <- unlist(vals)
return(as.factor(vals))
}
mods <- first.no.num(dataset$`API Name`)
mods
mods <- strsplit(dataset$`API Name`, ".")
mods
mods <- strsplit(dataset$`API Name`, "/.")
mods
mods <- strsplit(dataset$`API Name`, "\.")
mods <- strsplit(dataset$`API Name`, "\\.")
first.no.num <- function(vals) {
vals <- strsplit(vals, "\\.")
vals <- lapply(vals, function(x) x[1])
vals <- unlist(vals)
return(as.factor(vals))
}
mods <- first.no.num(dataset$`API Name`)
mods
dataset$`Model Type` <- mods
mods2 <- gsub("u-//d*", "u-", mods)
mods2
mods2 <- gsub("u-//d*tb1", "u-", mods)
mods2
mods2 <- gsub("u-[//d]*tb1", "u-", mods)
mods2
mods2 <- gsub("u-//d+tb1", "u-", mods)
mods2
mods2 <- gsub("//d", "u-", mods)
mods2
mods2 <- gsub("u-\\d+tb1", "u-", mods)
mods2
dataset$`Model Type` <- as.factor(mods2)
dataset$`Model Type`
first.no.num <- function(vals) {
vals <- strsplit(vals, " ")
vals <- lapply(vals, function(x) x[1])
vals <- unlist(vals)
return(as.factor(vals))
}
dataset$`Model Type` <- first.no.num(dataset$Name)
dataset$`Model Type`
dataset$`Model Type` <- gsub("U-\\d+TB1", "U", dataset$`Model Type`)
dataset$`Model Type`
dataset$`Model Type` <- as.factor(gsub("U-\\d+TB1", "U", dataset$`Model Type`))
dataset$`Model Type`
dataset$`Model Type` <- first.no.num(dataset$Name)
dataset$`Model Type` <- as.factor(gsub("U-\\d+TB1", "UTB1", dataset$`Model Type`))
dataset$`Model Type`
levels(dataset$`Model Type`)[levels(dataset$`Model Type`)=="General"] <- "P2"
dataset$`Model Type`
?apply
?ifelse
apply(dataset, 1, function(x) ifelse(x["Name"] == "High"), ifelse(strsplit(x["API Name"], "\\.")[1] == "cr1", "CR1", "HS1"), x["Model Type"])
apply(dataset, 1, function(x) ifelse(x["Name"] == "High", ifelse(strsplit(x["API Name"], "\\.")[1] == "cr1", "CR1", "HS1"), x["Model Type"])
)
dataset$`Model Type`
apply(dataset, 1, function(x) ifelse(x["Model Type"] == "High", ifelse(strsplit(x["API Name"], "\\.")[1] == "cr1", "CR1", "HS1"), x["Model Type"]))
apply(dataset, 1, function(x) ifelse(x["Model Type"] == "High", strsplit(x["API Name"], "\\.")[1], x["Model Type"]))
unlist(apply(dataset, 1, function(x) ifelse(x["Model Type"] == "High", strsplit(x["API Name"], "\\.")[1], x["Model Type"])))
apply(dataset, 1, function(x) ifelse(x["Model Type"] == "High", strsplit(x["API Name"], "\\.")[1], x["Model Type"]))
apply(dataset, 1, function(x) ifelse(x["Model Type"] == "High", strsplit(x["API Name"], "\\.")[[1]], x["Model Type"]))
dataset$`ModelType` <- as.factor(apply(dataset, 1, function(x) ifelse(x["Model Type"] == "High", strsplit(x["API Name"], "\\.")[[1]], x["Model Type"])))
dataset$`Model Type`
raw.dataset <- read_csv("Amazon EC2 Instance Comparison.csv")
setwd("~/Documents/AutomatedBayesCloudSelection/instance_details")
raw.dataset <- read_csv("Amazon EC2 Instance Comparison.csv")
dataset <- raw.dataset
dataset$Memory <- first.num(dataset$Memory)
dataset$`Compute Units (ECU)` <- first.num(dataset$`Compute Units (ECU)`)
dataset$vCPUs <- first.num(dataset$vCPUs)
dataset$`ECU per vCPU` <- first.num(dataset$`ECU per vCPU`)
dataset$Burstable <- is.na(dataset$`ECU per vCPU`)
dataset$`Model Type` <- first.no.num(dataset$Name)
dataset$`Model Type` <- as.factor(gsub("U-\\d+TB1", "UTB1", dataset$`Model Type`))
levels(dataset$`Model Type`)[levels(dataset$`Model Type`)=="General"] <- "P2"
dataset$`Model Type` <- as.factor(apply(dataset, 1, function(x) ifelse(x["Model Type"] == "High", strsplit(x["API Name"], "\\.")[[1]], x["Model Type"])))
dataset$`Model Type`
levels(dataset$`Model Type`)
get.category <- function(vals) {
categories <- c()
for (val in vals) {
if (val %in% general_purpose) {
append(categories, "General")
} else if (val %in% compute_optimized) {
append(categories, "Compute")
} else if (val %in% memory_optimized) {
append(categories, "Memory")
} else if (val %in% accelerated_computing) {
append(categories, "Accelerated")
} else if (val %in% storage_optimized) {
append(categories, "Storage")
} else {
append(categories, NA)
}
}
return(categories)
}
dataset$Category <- get.category(dataset$`Model Type`)
general_purpose <- c("A1", "T3", "T3A", "T2", "M5", "M5A", "M4", "M1", "M2", "M3", "M4", "M5AD", "T1")
compute_optimized <-  c("C5", "C5N", "C4", "C1", "C3", "Cluster")
memory_optimized <- c("R5", "R5A", "R4", "X1E", "X1", "UTB1", "Z1D", "cr1", "R3", "R5AD", "R5D")
accelerated_computing <- c("P3", "P2", "G3", "F1", "G2", "G3S", "P3DN")
storage_optimized <- c("I3", "I3EN", "D2", "H1", "hs1", "I2")
dataset$Category <- get.category(dataset$`Model Type`)
dataset$Category
get.category(dataset$`Model Type`)
categories <- c()
append(categories, "a")
get.category <- function(vals) {
categories <- c()
for (val in vals) {
if (val %in% general_purpose) {
categories <- append(categories, "General")
} else if (val %in% compute_optimized) {
acategories <- ppend(categories, "Compute")
} else if (val %in% memory_optimized) {
categories <- append(categories, "Memory")
} else if (val %in% accelerated_computing) {
categories <- append(categories, "Accelerated")
} else if (val %in% storage_optimized) {
categories <- append(categories, "Storage")
} else {
categories <- append(categories, NA)
}
}
return(categories)
}
dataset$Category <- get.category(dataset$`Model Type`)
get.category <- function(vals) {
categories <- c()
for (val in vals) {
if (val %in% general_purpose) {
categories <- append(categories, "General")
} else if (val %in% compute_optimized) {
categories <- append(categories, "Compute")
} else if (val %in% memory_optimized) {
categories <- append(categories, "Memory")
} else if (val %in% accelerated_computing) {
categories <- append(categories, "Accelerated")
} else if (val %in% storage_optimized) {
categories <- append(categories, "Storage")
} else {
categories <- append(categories, NA)
}
}
return(categories)
}
dataset$Category <- get.category(dataset$`Model Type`)
dataset$Category
dataset$Storage <- first.num(dataset$`Instance Storage`)
dataset$Storage
?grep
dataset$StorageType <- grepl("SSD", dataset$`Instance Storage`)
dataset$StorageType
dataset$StorageType <- as.factor(apply(dataset,1, function(x) ifelse(is.na(x["Storage"]), "EBS", ifelse(grepl("SSD", x["Instance Storage"]), "SSD", "HDD"))))
dataset$StorageType
View(raw.dataset)
raw.dataset <- read_csv("Amazon EC2 Instance Comparison.csv")
dataset <- raw.dataset
dataset$Memory <- first.num(dataset$Memory)
dataset$`Compute Units (ECU)` <- first.num(dataset$`Compute Units (ECU)`)
dataset$vCPUs <- first.num(dataset$vCPUs)
dataset$`ECU per vCPU` <- first.num(dataset$`ECU per vCPU`)
dataset$Storage <- first.num(dataset$`Instance Storage`)
dataset$Burstable <- is.na(dataset$`ECU per vCPU`)
dataset$`Model Type` <- first.no.num(dataset$Name)
dataset$`Model Type` <- as.factor(gsub("U-\\d+TB1", "UTB1", dataset$`Model Type`))
levels(dataset$`Model Type`)[levels(dataset$`Model Type`)=="General"] <- "P2"
dataset$`Model Type` <- as.factor(apply(dataset, 1, function(x) ifelse(x["Model Type"] == "High", strsplit(x["API Name"], "\\.")[[1]], x["Model Type"])))
dataset$Category <- get.category(dataset$`Model Type`)
dataset$StorageType <- as.factor(apply(dataset,1, function(x) ifelse(is.na(x["Storage"]), "EBS", ifelse(grepl("SSD", x["Instance Storage"]), "SSD", "HDD"))))
test <-
dataset[31:52,] <- apply(dataset[31:52,], 2, function(col) as.numeric(grep("\\d+\\.\\d+", col, value=TRUE)))
warnings()
as.numeric(grep("\\d+\\.\\d+", dataset[31,], value=TRUE)
)
grep("\\d+\\.\\d+", dataset[31,], value=TRUE)
test <-
dataset[,31:52] <- apply(dataset[,31:52], 2, function(col) as.numeric(grep("\\d+\\.\\d+", col, value=TRUE)))
grep("\\d+\\.\\d+", dataset[,31], value=TRUE)
dataset[,31]
dataset <- data.frame(raw.dataset)
dataset$Memory <- first.num(dataset$Memory)
dataset$`Compute Units (ECU)` <- first.num(dataset$`Compute Units (ECU)`)
dataset$vCPUs <- first.num(dataset$vCPUs)
raw.dataset <- read_csv("Amazon EC2 Instance Comparison.csv")
dataset <- raw.dataset
dataset$Memory <- first.num(dataset$Memory)
dataset$`Compute Units (ECU)` <- first.num(dataset$`Compute Units (ECU)`)
dataset$vCPUs <- first.num(dataset$vCPUs)
dataset$`ECU per vCPU` <- first.num(dataset$`ECU per vCPU`)
dataset$Storage <- first.num(dataset$`Instance Storage`)
dataset$Burstable <- is.na(dataset$`ECU per vCPU`)
dataset$`Model Type` <- first.no.num(dataset$Name)
dataset$`Model Type` <- as.factor(gsub("U-\\d+TB1", "UTB1", dataset$`Model Type`))
levels(dataset$`Model Type`)[levels(dataset$`Model Type`)=="General"] <- "P2"
dataset$`Model Type` <- as.factor(apply(dataset, 1, function(x) ifelse(x["Model Type"] == "High", strsplit(x["API Name"], "\\.")[[1]], x["Model Type"])))
dataset$Category <- get.category(dataset$`Model Type`)
dataset$StorageType <- as.factor(apply(dataset,1, function(x) ifelse(is.na(x["Storage"]), "EBS", ifelse(grepl("SSD", x["Instance Storage"]), "SSD", "HDD"))))
dataset <- data.frame(dataset)
pull
dataset[,31:52] <- apply(dataset[,31:52], 2, function(col) as.numeric(grep("\\d+\\.\\d+", col, value=TRUE)))
dataset[,31]
test <- dataset[,31]
as.numeric(grep("\\d+\\.\\d+", test, value=TRUE))
grep("\\d+\\.\\d+", test, value=TRUE)
gregexpr("\\d+\\.\\d+", test, value=TRUE)
gregexpr("\\d+\\.\\d+", test)
test <- gregexpr("\\d+\\.\\d+", test)
test2 <- test
test <- dataset[,31]
test2 <- gregexpr("\\d+\\.\\d+", test)
test2
regmatches(test, test2)
unlist(regmatches(test, test2))
as.numeric(regmatches(test, test2))
dataset[,31:52] <- apply(dataset[,31:52], 2, function(col) as.numeric(regmatches(col, grep("\\d+\\.\\d+", col, value=TRUE))))
dataset[,31:52] <- apply(dataset[,31:52], 2, function(col) as.numeric(regmatches(col, gregexpr("\\d+\\.\\d+", col, value=TRUE))))
dataset[,31:52] <- apply(dataset[,31:52], 2, function(col) as.numeric(regmatches(col, gregexpr("\\d+\\.\\d+", col))))
gregexpr("\\d+\\.\\d+", raw.dataset[,31])
raw.dataset[,31]
unlist(raw.dataset[,31])
gregexpr("\\d+\\.\\d+", unlist(raw.dataset[,31]))
raw.dataset <- read_csv("Amazon EC2 Instance Comparison.csv")
dataset <- raw.dataset
dataset$Memory <- first.num(dataset$Memory)
dataset$`Compute Units (ECU)` <- first.num(dataset$`Compute Units (ECU)`)
dataset$vCPUs <- first.num(dataset$vCPUs)
dataset$`ECU per vCPU` <- first.num(dataset$`ECU per vCPU`)
dataset$Storage <- first.num(dataset$`Instance Storage`)
dataset$Burstable <- is.na(dataset$`ECU per vCPU`)
dataset$`Model Type` <- first.no.num(dataset$Name)
dataset$`Model Type` <- as.factor(gsub("U-\\d+TB1", "UTB1", dataset$`Model Type`))
levels(dataset$`Model Type`)[levels(dataset$`Model Type`)=="General"] <- "P2"
dataset$`Model Type` <- as.factor(apply(dataset, 1, function(x) ifelse(x["Model Type"] == "High", strsplit(x["API Name"], "\\.")[[1]], x["Model Type"])))
dataset$Category <- get.category(dataset$`Model Type`)
dataset$StorageType <- as.factor(apply(dataset,1, function(x) ifelse(is.na(x["Storage"]), "EBS", ifelse(grepl("SSD", x["Instance Storage"]), "SSD", "HDD"))))
dataset[,31:52] <- apply(dataset[,31:52], 2, function(col) as.numeric(regmatches(unlist(col), gregexpr("\\d+\\.\\d+", unlist(col)))))
write_csv(dataset, "cleaned_ec2_info.csv")
