ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot(outlier.shape=NA) +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type",
title = "Boxplots of time-taken for different \nBayesian Optimization searches")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type",
title = "Boxplots of time-taken for different \nBayesian Optimization searches")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
coord_cartesian(ylim=c(0, 2000)) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type",
title = "Boxplots of time-taken for different \nBayesian Optimization searches")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
coord_cartesian(ylim=c(0, 2000)) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type",
title = "Boxplots of time taken for different \nBayesian Optimization searches")
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
library(ggpubr)
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
install.packages("ggpubr")
library(ggpubr)
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
results.plot <- ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion of mean from potential best machine", fill = "Test Type",
title = "Boxplots of the best relative objective function\nvalues returned for different Bayesian Optimization searches")
time.plot <- ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
coord_cartesian(ylim=c(0, 2000)) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type",
title = "Boxplots of time taken for different \nBayesian Optimization searches")
exps$cost_scale = scale(exps$Cost, 0)
cost.plot <- ggplot(exps, aes(test_type, cost_scale, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Relative estimated search cost", fill = "Test Type",
title = "Boxplots of relative search cost for \ndifferent Bayesian Optimization searches")
library(ggpubr)
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
results.plot <- ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion \nof mean from potential best machine", fill = "Test Type",
title = "Boxplots of the best relative objective function\nvalues returned for different Bayesian Optimization searches")
time.plot <- ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
coord_cartesian(ylim=c(0, 2000)) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between \nstart of first and last job", fill = "Test Type",
title = "Boxplots of time taken for different \nBayesian Optimization searches")
exps$cost_scale = scale(exps$Cost, 0)
cost.plot <- ggplot(exps, aes(test_type, cost_scale, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Relative estimated search cost", fill = "Test Type",
title = "Boxplots of relative search cost for \ndifferent Bayesian Optimization searches")
exps.summ <- exps %>% group_by(test_type) %>% summarise(mean_rel_result = mean(Best_Result_Relative),
sd_rel_result = sd(Best_Result_Relative),
n_samples = n(),
ci95 = qt(0.975,df=n_samples-1)*sd_rel_result/sqrt(n_samples))
library(ggpubr)
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
results.plot <- ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion \nof mean from potential best machine", fill = "Test Type",
title = "Boxplots of the best values returned \nfor different Bayesian Optimization searches")
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
results.plot <- ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion \nof mean from potential best machine", fill = "Test Type",
title = "Boxplots of best values returned \nfor different Bayesian Optimization searches")
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
ggplot(exps, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red4", "chartreuse4")) +
labs(fill="Sucessful prediction", x="Best predicted instance", y="Count") +
facet_grid(cols=vars(test_type))
ggplot(exps, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red4", "chartreuse4")) +
labs(fill="Sucessful prediction", x="Best predicted instance", y="Count") +
facet_wrap(~vars(test_type))
ggplot(exps, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red4", "chartreuse4")) +
labs(fill="Sucessful prediction", x="Best predicted instance", y="Count") +
facet_wrap(~test_type)
library(ggplot2)
logs$instance <- as.factor(logs$instance)
instance_types <- levels(logs$instance)
logs <- read.csv("curltest_results.csv")
remove_square_brackets <- function(string, edge_length=1) {
return(substr(string, 1+edge_length, nchar(string)-(edge_length)))
}
logs$cpu <- vapply(as.character(logs$cpu), function(x) return(strtoi(remove_square_brackets(x))), c(1))
google_logs = logs[logs$provider == "['google']",]
aws_logs = logs[logs$provider == "['aws']",]
levels(logs$provider) <- c("Amazon EC2", "Google Compute Engine")
ns <- c()
## Score
score_means = c()
score_sds = c()
score_relsds = c()
### Score/price
value_means = c()
value_sds = c()
value_relsds = c()
for (i in instance_types) {
print(i)
ns <- c(ns, nrow(logs[logs$instance==i,]))
s_mean <- mean(logs[logs$instance==i,]$score)
s_sd <- sd(logs[logs$instance==i,]$score)
print(paste("Mean:", s_mean))
score_means <- c(score_means, s_mean)
print(paste("SD:", s_sd))
print(paste("n:", nrow(logs[logs$instance==i,])))
score_sds <- c(score_sds, s_sd)
score_relsds <- c(score_relsds, s_sd/s_mean)
qqnorm(logs[logs$instance==i,]$score, main=i)
# print(shapiro.test(logs[logs$instance==i,]$score))
v_mean <- mean(logs[logs$instance==i,]$value)
v_sd <- sd(logs[logs$instance==i,]$value)
print(paste("Mean:", v_mean))
value_means <- c(value_means, v_mean)
print(paste("SD:", v_sd))
value_sds <- c(value_sds, v_sd)
value_relsds <- c(value_relsds, v_sd/v_mean)
}
names(score_means) <- instance_types
names(score_sds) <- instance_types
names(score_relsds) <- instance_types
names(value_means) <- instance_types
library(ggplot2)
logs <- read.csv("curltest_results.csv")
logs$instance <- as.factor(logs$instance)
instance_types <- levels(logs$instance)
remove_square_brackets <- function(string, edge_length=1) {
return(substr(string, 1+edge_length, nchar(string)-(edge_length)))
}
logs$cpu <- vapply(as.character(logs$cpu), function(x) return(strtoi(remove_square_brackets(x))), c(1))
google_logs = logs[logs$provider == "['google']",]
aws_logs = logs[logs$provider == "['aws']",]
levels(logs$provider) <- c("Amazon EC2", "Google Compute Engine")
ns <- c()
## Score
score_means = c()
score_sds = c()
score_relsds = c()
### Score/price
value_means = c()
value_sds = c()
value_relsds = c()
for (i in instance_types) {
print(i)
ns <- c(ns, nrow(logs[logs$instance==i,]))
s_mean <- mean(logs[logs$instance==i,]$score)
s_sd <- sd(logs[logs$instance==i,]$score)
print(paste("Mean:", s_mean))
score_means <- c(score_means, s_mean)
print(paste("SD:", s_sd))
print(paste("n:", nrow(logs[logs$instance==i,])))
score_sds <- c(score_sds, s_sd)
score_relsds <- c(score_relsds, s_sd/s_mean)
qqnorm(logs[logs$instance==i,]$score, main=i)
# print(shapiro.test(logs[logs$instance==i,]$score))
v_mean <- mean(logs[logs$instance==i,]$value)
v_sd <- sd(logs[logs$instance==i,]$value)
print(paste("Mean:", v_mean))
value_means <- c(value_means, v_mean)
print(paste("SD:", v_sd))
value_sds <- c(value_sds, v_sd)
value_relsds <- c(value_relsds, v_sd/v_mean)
}
names(score_means) <- instance_types
names(score_sds) <- instance_types
names(score_relsds) <- instance_types
names(value_means) <- instance_types
names(value_sds) <- instance_types
names(value_relsds) <- instance_types
mod <- lm(score ~ instance, data=logs)
aov <- aov(mod)
TukeyHSD(aov)
mod2 <- lm(score ~ as.factor(cpu)*provider*type, logs)
aov2 <- aov(mod2)
TukeyHSD(aov2)
mod.value <- lm(value ~ instance, data=logs)
aov.value <- aov(mod.value)
TukeyHSD(aov.value)
mod.value2 <- lm(value ~ as.factor(cpu)*provider*type, logs)
aov.value2 <- aov(mod.value2)
TukeyHSD(aov.value2)
ggplot(logs, aes(score)) +
geom_histogram() +
facet_wrap(~instance)
ggplot(logs, aes(as.factor(cpu), score, color=provider)) +
geom_boxplot() +
xlab("vCPU #") + ylab("vBench Score") +
labs(title="vBench scores for different cloud configurations", color="Provider") +
facet_grid(cols=vars(type))
logs <- read.csv("vbench_results.csv")
logs$instance <- as.factor(logs$instance)
instance_types <- levels(logs$instance)
remove_square_brackets <- function(string, edge_length=1) {
return(substr(string, 1+edge_length, nchar(string)-(edge_length)))
}
logs$cpu <- vapply(as.character(logs$cpu), function(x) return(strtoi(remove_square_brackets(x))), c(1))
google_logs = logs[logs$provider == "['google']",]
aws_logs = logs[logs$provider == "['aws']",]
levels(logs$provider) <- c("Amazon EC2", "Google Compute Engine")
ns <- c()
## Score
score_means = c()
score_sds = c()
score_relsds = c()
### Score/price
value_means = c()
value_sds = c()
value_relsds = c()
for (i in instance_types) {
print(i)
ns <- c(ns, nrow(logs[logs$instance==i,]))
s_mean <- mean(logs[logs$instance==i,]$score)
s_sd <- sd(logs[logs$instance==i,]$score)
print(paste("Mean:", s_mean))
score_means <- c(score_means, s_mean)
print(paste("SD:", s_sd))
print(paste("n:", nrow(logs[logs$instance==i,])))
score_sds <- c(score_sds, s_sd)
score_relsds <- c(score_relsds, s_sd/s_mean)
qqnorm(logs[logs$instance==i,]$score, main=i)
# print(shapiro.test(logs[logs$instance==i,]$score))
v_mean <- mean(logs[logs$instance==i,]$value)
v_sd <- sd(logs[logs$instance==i,]$value)
print(paste("Mean:", v_mean))
value_means <- c(value_means, v_mean)
print(paste("SD:", v_sd))
value_sds <- c(value_sds, v_sd)
value_relsds <- c(value_relsds, v_sd/v_mean)
}
names(score_means) <- instance_types
names(score_means) <- instance_types
names(score_sds) <- instance_types
names(score_relsds) <- instance_types
names(value_means) <- instance_types
names(value_sds) <- instance_types
names(value_relsds) <- instance_types
mod <- lm(score ~ instance, data=logs)
aov <- aov(mod)
TukeyHSD(aov)
mod2 <- lm(score ~ as.factor(cpu)*provider*type, logs)
aov2 <- aov(mod2)
TukeyHSD(aov2)
mod.value <- lm(value ~ instance, data=logs)
aov.value <- aov(mod.value)
TukeyHSD(aov.value)
mod.value2 <- lm(value ~ as.factor(cpu)*provider*type, logs)
aov.value2 <- aov(mod.value2)
TukeyHSD(aov.value2)
ggplot(logs, aes(score)) +
geom_histogram() +
facet_wrap(~instance)
ggplot(logs, aes(as.factor(cpu), score, color=provider)) +
geom_boxplot() +
xlab("vCPU #") + ylab("vBench Score") +
labs(title="vBench scores for different cloud configurations", color="Provider") +
facet_grid(cols=vars(type))
ggplot(logs, aes(as.factor(cpu), score)) +
geom_boxplot() +
facet_grid(rows=vars(provider), cols=vars(type), scales="free_y")
ggplot(google_logs, aes(as.factor(cpu), score)) +
geom_boxplot() +
facet_grid(cols=vars(type))
ggplot(aws_logs, aes(as.factor(cpu), score)) +
geom_boxplot() +
facet_grid(cols=vars(type))
ggplot(logs, aes(score, color=as.factor(cpu))) +
geom_freqpoly(aes(y=..density..), alpha=0.7) +
labs(title="Distributions of vBench scores for different instance configurations",
x="Score", y = "Density", color="vCPUs") +
facet_grid(rows=vars(provider), cols=vars(type))
ggplot(logs, aes(score, fill=as.factor(cpu))) +
geom_histogram(aes(y=..density..), alpha=0.7, position="identity") +
facet_grid(rows=vars(provider), cols=vars(type))
ggplot(logs, aes(x=cpu, y=score, shape=provider, color=type)) + geom_point(size=3)
ggplot(logs, aes(as.factor(cpu), value, color=provider)) +
geom_boxplot() +
xlab("vCPU #") + ylab("Score/Price") +
labs(title="Objective function result (vBench score / price per hour) for different cloud configurations",
color="Provider") +
facet_grid(cols=vars(type), scales="free_y")
ggplot(logs, aes(as.factor(cpu), value, color=provider)) +
geom_boxplot() +
xlab("vCPU #") + ylab("Score/Price") +
labs(title="Objective function result (vBench score / price per hour) \nfor different cloud configurations",
color="Provider") +
facet_grid(cols=vars(type), scales="free_y")
exps <- read.csv("exps_results.csv")
exps$single_concurrent <- exps$Concurrent_Jobs == 1
exps$success <- ifelse(exps$Multiple_Providers == "True", exps$Best_instance=="c5.large", exps$Best_instance=="n1-highcpu-2")
exps$success <- ifelse(exps$Deployer == "ping_testserver", (exps$Best_instance == "c5.large" | exps$Best_instance == "m5.large"), exps$success)
# Getting test type:
test_types <- vector(mode="character", length=nrow(vbench))
for (i in 1:nrow(exps)) {
if (exps$Deployer[i] == "ping_testserver") {
test_types[i] <- "Ping test, 1 concurrent job, multiple providers"
}
else if (exps$Concurrent_Jobs[i] == 2) {
test_types[i] <- "Multiple providers, 2 concurrent jobs"
} else {
if (exps$Multiple_Providers[i] == "True") {
if (exps$single_concurrent[i]) {
test_types[i] <- "Multiple providers, single job"
} else {
test_types[i] <- "Multiple providers, 3 concurrent jobs"
}
} else {
if (exps$single_concurrent[i]) {
test_types[i] <- "Single provider, single job"
} else {
test_types[i] <- "Single provider, 3 concurrent jobs"
}
}
}
}
exps$test_type <- factor(test_types, levels=c("Single provider, single job",
"Single provider, 3 concurrent jobs",
"Multiple providers, single job",
"Multiple providers, 2 concurrent jobs",
"Multiple providers, 3 concurrent jobs",
"Ping test, 1 concurrent job, multiple providers"))
exps <- read.csv("exps_results.csv")
exps$single_concurrent <- exps$Concurrent_Jobs == 1
exps$success <- ifelse(exps$Multiple_Providers == "True", exps$Best_instance=="c5.large", exps$Best_instance=="n1-highcpu-2")
exps$success <- ifelse(exps$Deployer == "ping_testserver", (exps$Best_instance == "c5.large" | exps$Best_instance == "m5.large"), exps$success)
# Getting test type:
test_types <- vector(mode="character", length=nrow(vbench))
# Getting test type:
test_types <- vector(mode="character", length=nrow(exps))
for (i in 1:nrow(exps)) {
if (exps$Deployer[i] == "ping_testserver") {
test_types[i] <- "Ping test, 1 concurrent job, multiple providers"
}
else if (exps$Concurrent_Jobs[i] == 2) {
test_types[i] <- "Multiple providers, 2 concurrent jobs"
} else {
if (exps$Multiple_Providers[i] == "True") {
if (exps$single_concurrent[i]) {
test_types[i] <- "Multiple providers, single job"
} else {
test_types[i] <- "Multiple providers, 3 concurrent jobs"
}
} else {
if (exps$single_concurrent[i]) {
test_types[i] <- "Single provider, single job"
} else {
test_types[i] <- "Single provider, 3 concurrent jobs"
}
}
}
}
exps$test_type <- factor(test_types, levels=c("Single provider, single job",
"Single provider, 3 concurrent jobs",
"Multiple providers, single job",
"Multiple providers, 2 concurrent jobs",
"Multiple providers, 3 concurrent jobs",
"Ping test, 1 concurrent job, multiple providers"))
best_result_mean <- mean(exps$Best_Result[exps$Best_instance == "c5.large" & exps$Deployer == "vbench"])
best_result_mean.google <- mean(exps$Best_Result[exps$Best_instance=="n1-highcpu-2" & exps$Deployer == "vbench"])
best_result_mean.curltest <- mean(exps$Best_Result[exps$Deployer == "ping_testserver"])
exps$Best_Result_Relative <- ifelse(exps$Multiple_Providers == "True",
exps$Best_Result/best_result_mean,
exps$Best_Result/best_result_mean.google)
exps$Best_Result_Relative <- ifelse(exps$Deployer == "ping_testserver",
exps$Best_Result/best_result_mean.curltest,
exps$Best_Result_Relative)
vbench <- exps[exps$Deployer=="vbench",]
curl_test <- exps[exps$Deployer=="ping_testserver",]
library(dplyr)
library(ggplot2)
ggplot(exps, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red4", "chartreuse4")) +
labs(fill="Sucessful prediction", x="Best predicted instance", y="Count") +
facet_wrap(~test_type)
ggplot(exps, aes(test_type, -Best_Result, group=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3)
results.plot <- ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion \nof mean from potential best machine", fill = "Test Type",
title = "Boxplots of best values returned \nfor different Bayesian Optimization searches")
time.plot <- ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
coord_cartesian(ylim=c(0, 2000)) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between \nstart of first and last job", fill = "Test Type",
title = "Boxplots of time taken for different \nBayesian Optimization searches")
exps$cost_scale = scale(exps$Cost, 0)
cost.plot <- ggplot(exps, aes(test_type, cost_scale, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Relative estimated search cost", fill = "Test Type",
title = "Boxplots of relative search cost for \ndifferent Bayesian Optimization searches")
exps.summ <- exps %>% group_by(test_type) %>% summarise(mean_rel_result = mean(Best_Result_Relative),
sd_rel_result = sd(Best_Result_Relative),
n_samples = n(),
ci95 = qt(0.975,df=n_samples-1)*sd_rel_result/sqrt(n_samples))
library(ggpubr)
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
mean(exps$Time[exps$test_type=="Multiple providers, single job"])
mean(exps$Time[exps$test_type=="Multiple providers, 2 concurrent jobs"])
time.mod <- lm(Time ~ Multiple_Providers * Concurrent_Jobs, vbench)
time.mod
summary(time.mod)
time.aov <- aov(time.mod)
time.aov
summary(time.aov)
time.mod <- lm(Time ~ Multiple_Providers * as.factor(Concurrent_Jobs), vbench)
summary(time.mod)
time.aov <- aov(time.mod)
summary(time.aov)
TukeyHSD(time.aov)
value.mod <- lm(Value ~ Multiple_Providers * as.factor(Concurrent_Jobs), vbench)
value.mod <- lm(value ~ Multiple_Providers * as.factor(Concurrent_Jobs), vbench)
value.mod <- lm(Best_Result_Relative ~ Multiple_Providers * as.factor(Concurrent_Jobs), vbench)
value.aov <- aov(value.mod)
TukeyHSD(value.aov)
cost.mod <- lm(cost_scale ~ Multiple_Providers * as.factor(Concurrent_Jobs), vbench)
vbench <- exps[exps$Deployer=="vbench",]
cost.mod <- lm(cost_scale ~ Multiple_Providers * as.factor(Concurrent_Jobs), vbench)
cost.aov <- aov(cost.mod)
TukeyHSD(cost.aov)
TukeyHSD(time.oav)
TukeyHSD(time.aov)
citation()
RStudio.version()
Rstudio.version()
RStudio.Version()
