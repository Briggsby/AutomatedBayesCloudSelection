library(readr)
data <- read_csv("Documents/CS5052Practical/data.csv")
View(data)
plot(Inputs~ResponseTime, data=data)
plot(Inputs~ResponseTimes, data=data)
lm(ResponseTimes ~ Inputs, data=data)
mod <- lm(ResponseTimes ~ Inputs, data=data)
summary(mod)
plot(mod)
exps <- read.csv("exps_results.csv")
vbench <- exps[exps$Deployer=="vbench",]
curl_test <- exps[exps$Deployer=="ping_testserver",]
vbench$single_concurrent <- vbench$Concurrent_Jobs == 1
plot(vbench$Best_instance~vbench$Concurrent_Jobs)
vbench$test_type <- ifelse(vbench$single_concurrent, "Single Job", ifelse(vbench$Multiple_Providers == 'True', "Multiple jobs and providers", "Single Provider"))
library(ggplot2)
ggplot(vbench, aes(Best_instance)) +
geom_bar() +
facet_grid(cols=vars(test_type))
library(ggrepel)
job_path <- read.csv("spearmint_exps/0/job_path.csv")
setwd("~/Documents/Dissertation/AutomatedBayesCloudSelection/logs")
library(ggplot2)
library(ggrepel)
job_path <- read.csv("spearmint_exps/0/job_path.csv")
normal.plot <- ggplot(job_path, aes(vCPUs, Value, group=1)) +
geom_point(aes(shape=Category, color=Provider), size=4) +
geom_label_repel(aes(label=Job_number), box.padding=0.25, hjust=-2, vjust=2) +
geom_segment(aes(xend=c(tail(vCPUs, n=-1), NA), yend=c(tail(Value, n=-1), NA)), color="purple",
arrow=arrow(angle=20, length=unit(0.4, "cm"))) +
labs(title="Path of a successful Bayesian Optimization search, 3 concurrent jobs") +
ylim(c(-8.3, -1))
job_path.fail <- read.csv("spearmint_exps/1/job_path.csv")
fail.plot <- ggplot(job_path.fail, aes(vCPUs, Value, group=1)) +
geom_point(aes(shape=Category, color=Provider), size=4) +
geom_label_repel(aes(label=Job_number), box.padding=0.25, hjust=-2, vjust=2) +
geom_segment(aes(xend=c(tail(vCPUs, n=-1), NA), yend=c(tail(Value, n=-1), NA)), color="purple",
arrow=arrow(angle=20, length=unit(0.4, "cm"))) +
labs(title="Path of an incorrect Bayesian Optimization search, 3 concurrent jobs") +
ylim(c(-8.3, -1))
job_path.single <- read.csv("spearmint_exps/46/job_path.csv")
sing.job.plot <- ggplot(job_path.single, aes(vCPUs, Value, group=1)) +
geom_point(aes(shape=Category, color=Provider), size=4) +
geom_label_repel(aes(label=Job_number), box.padding=0.25, hjust=-2, vjust=2) +
geom_segment(aes(xend=c(tail(vCPUs, n=-1), NA), yend=c(tail(Value, n=-1), NA)), color="purple",
arrow=arrow(angle=20, length=unit(0.4, "cm"))) +
labs(title="Path of an incorrect Bayesian Optimization search, 3 concurrent jobs") +
ylim(c(-8.3, -1))
library(ggpubr)
ggarrange(normal.plot, fail.plot, sing.job.plot)
ggarrange(normal.plot, fail.plot, sing.job.plot + rremove("legend"))
ggarrange(normal.plot + rremove("legend"),
fail.plot + rremove("legend"),
sing.job.plot + rremove("legend"))
ggarrange(normal.plot + rremove("legend"),
fail.plot + rremove("legend"),
sing.job.plot)
ggarrange(normal.plot + rremove("legend"),
fail.plot + rremove("legend"),
sing.job.plot,
labels=c('A', 'B', 'C'))
ggarrange(normal.plot + rremove("legend"),
fail.plot + rremove("legend"),
sing.job.plot +rremove("legend"),
cowplot::get_legend(normal.plot),
labels=c('A', 'B', 'C'))
sing.job.plot <- ggplot(job_path.single, aes(vCPUs, Value, group=1)) +
geom_point(aes(shape=Category, color=Provider), size=4) +
geom_label_repel(aes(label=Job_number), box.padding=0.25, hjust=-2, vjust=2) +
geom_segment(aes(xend=c(tail(vCPUs, n=-1), NA), yend=c(tail(Value, n=-1), NA)), color="purple",
arrow=arrow(angle=20, length=unit(0.4, "cm"))) +
labs(title="Path of a successful Bayesian Optimization search, 1 concurrent jobs") +
ylim(c(-8.3, -1))
library(ggpubr)
ggarrange(normal.plot + rremove("legend"),
fail.plot + rremove("legend"),
sing.job.plot +rremove("legend"),
cowplot::get_legend(normal.plot),
labels=c('A', 'B', 'C'))
sing.job.plot <- ggplot(job_path.single, aes(vCPUs, Value, group=1)) +
geom_point(aes(shape=Category, color=Provider), size=4) +
geom_label_repel(aes(label=Job_number), box.padding=0.25, hjust=-2, vjust=2) +
geom_segment(aes(xend=c(tail(vCPUs, n=-1), NA), yend=c(tail(Value, n=-1), NA)), color="purple",
arrow=arrow(angle=20, length=unit(0.4, "cm"))) +
labs(title="Path of a successful Bayesian Optimization search, 1 concurrent job") +
ylim(c(-8.3, -1))
library(ggpubr)
ggarrange(normal.plot + rremove("legend"),
fail.plot + rremove("legend"),
sing.job.plot +rremove("legend"),
cowplot::get_legend(normal.plot),
labels=c('A', 'B', 'C'))
job_path.single.fail <- read.csv("spearmint_exps/41/job_path.csv")
sing.job.plot.fail <- ggplot(job_path.single.fail, aes(vCPUs, Value, group=1)) +
geom_point(aes(shape=Category, color=Provider), size=4) +
geom_label_repel(aes(label=Job_number), box.padding=0.25, hjust=-2, vjust=2) +
geom_segment(aes(xend=c(tail(vCPUs, n=-1), NA), yend=c(tail(Value, n=-1), NA)), color="purple",
arrow=arrow(angle=20, length=unit(0.4, "cm"))) +
labs(title="Path of a successful Bayesian Optimization search, 1 concurrent job") +
ylim(c(-8.3, -1))
sing.job.plot.fail
job_path.single.fail <- read.csv("spearmint_exps/40/job_path.csv")
sing.job.plot.fail <- ggplot(job_path.single.fail, aes(vCPUs, Value, group=1)) +
geom_point(aes(shape=Category, color=Provider), size=4) +
geom_label_repel(aes(label=Job_number), box.padding=0.25, hjust=-2, vjust=2) +
geom_segment(aes(xend=c(tail(vCPUs, n=-1), NA), yend=c(tail(Value, n=-1), NA)), color="purple",
arrow=arrow(angle=20, length=unit(0.4, "cm"))) +
labs(title="Path of a successful Bayesian Optimization search, 1 concurrent job") +
ylim(c(-8.3, -1))
sing.job.plot.fail
job_path.single.fail <- read.csv("spearmint_exps/43/job_path.csv")
sing.job.plot.fail <- ggplot(job_path.single.fail, aes(vCPUs, Value, group=1)) +
geom_point(aes(shape=Category, color=Provider), size=4) +
geom_label_repel(aes(label=Job_number), box.padding=0.25, hjust=-2, vjust=2) +
geom_segment(aes(xend=c(tail(vCPUs, n=-1), NA), yend=c(tail(Value, n=-1), NA)), color="purple",
arrow=arrow(angle=20, length=unit(0.4, "cm"))) +
labs(title="Path of a successful Bayesian Optimization search, 1 concurrent job") +
ylim(c(-8.3, -1))
sing.job.plot.fail
ggarrange(normal.plot + rremove("legend"),
fail.plot + rremove("legend"),
sing.job.plot +rremove("legend"),
singe.job.plot.fail + rremove("legend")
cowplot::get_legend(normal.plot),
labels=c('A', 'B', 'C'))
ggarrange(normal.plot + rremove("legend"),
fail.plot + rremove("legend"),
sing.job.plot +rremove("legend"),
singe.job.plot.fail + rremove("legend"),
cowplot::get_legend(normal.plot),
labels=c('A', 'B', 'C'))
ggarrange(normal.plot + rremove("legend"),
fail.plot + rremove("legend"),
sing.job.plot +rremove("legend"),
sing.job.plot.fail + rremove("legend"),
cowplot::get_legend(normal.plot),
labels=c('A', 'B', 'C'))
ggarrange(normal.plot + rremove("legend"),
fail.plot + rremove("legend"),
sing.job.plot +rremove("legend"),
sing.job.plot.fail + rremove("legend"),
labels=c('A', 'B', 'C'))
sing.job.plot.fail <- ggplot(job_path.single.fail, aes(vCPUs, Value, group=1)) +
geom_point(aes(shape=Category, color=Provider), size=4) +
geom_label_repel(aes(label=Job_number), box.padding=0.25, hjust=-2, vjust=2) +
geom_segment(aes(xend=c(tail(vCPUs, n=-1), NA), yend=c(tail(Value, n=-1), NA)), color="purple",
arrow=arrow(angle=20, length=unit(0.4, "cm"))) +
labs(title="Path of an incorrect Bayesian Optimization search, 1 concurrent job") +
ylim(c(-8.3, -1))
ggarrange(normal.plot + rremove("legend"),
fail.plot + rremove("legend"),
sing.job.plot +rremove("legend"),
sing.job.plot.fail + rremove("legend"),
labels=c('A', 'B', 'C', "D"))
ggarrange(normal.plot + rremove("legend"),
fail.plot + rremove("legend"),
sing.job.plot +rremove("legend"),
sing.job.plot.fail,
labels=c('A', 'B', 'C', "D"))
job_path.single <- read.csv("spearmint_exps/40/job_path.csv")
sing.job.plot <- ggplot(job_path.single, aes(vCPUs, Value, group=1)) +
geom_point(aes(shape=Category, color=Provider), size=4) +
geom_label_repel(aes(label=Job_number), box.padding=0.25, hjust=-2, vjust=2) +
geom_segment(aes(xend=c(tail(vCPUs, n=-1), NA), yend=c(tail(Value, n=-1), NA)), color="purple",
arrow=arrow(angle=20, length=unit(0.4, "cm"))) +
labs(title="Path of a successful Bayesian Optimization search, 1 concurrent job") +
ylim(c(-8.3, -1))
sing.job.plot
job_path.single.fail <- read.csv("spearmint_exps/43/job_path.csv")
sing.job.plot.fail <- ggplot(job_path.single.fail, aes(vCPUs, Value, group=1)) +
geom_point(aes(shape=Category, color=Provider), size=4) +
geom_label_repel(aes(label=Job_number), box.padding=0.25, hjust=-2, vjust=2) +
geom_segment(aes(xend=c(tail(vCPUs, n=-1), NA), yend=c(tail(Value, n=-1), NA)), color="purple",
arrow=arrow(angle=20, length=unit(0.4, "cm"))) +
labs(title="Path of an incorrect Bayesian Optimization search, 1 concurrent job") +
ylim(c(-8.3, -1))
library(ggpubr)
ggarrange(normal.plot + rremove("legend"),
fail.plot + rremove("legend"),
sing.job.plot +rremove("legend"),
sing.job.plot.fail,
labels=c('A', 'B', 'C', "D"))
exps <- read.csv("exps_results.csv")
vbench <- exps[exps$Deployer=="vbench",]
curl_test <- exps[exps$Deployer=="ping_testserver",]
vbench$single_concurrent <- vbench$Concurrent_Jobs == 1
plot(vbench$Best_instance~vbench$Concurrent_Jobs)
vbench$test_type <- ifelse(vbench$single_concurrent, "Single Job", ifelse(vbench$Multiple_Providers == 'True', "Multiple jobs and providers", "Single Provider"))
library(ggplot2)
ggplot(vbench, aes(Best_instance)) +
geom_bar() +
facet_grid(cols=vars(test_type))
vbench$success <- ifelse(vbench$Multiple_Providers, vbench$Best_instance=="c5.large", vbench$Best_instance=="n1-highcpu-2")
vbench$success <- ifelse(vbench$Multiple_Providers == "True", vbench$Best_instance=="c5.large", vbench$Best_instance=="n1-highcpu-2")
vbench$success
ggplot(vbench, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
facet_grid(cols=vars(test_type))
ggplot(vbench, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_discrete(c("green", "red")) +
labs(fill="Sucessful prediction") +
facet_grid(cols=vars(test_type))
ggplot(vbench, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
labs(fill="Sucessful prediction") +
facet_grid(cols=vars(test_type))
ggplot(vbench, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("green", "red")) +
labs(fill="Sucessful prediction") +
facet_grid(cols=vars(test_type))
ggplot(vbench, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red", "green")) +
labs(fill="Sucessful prediction") +
facet_grid(cols=vars(test_type))
ggplot(vbench, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red", "green")) +
scale_fill_hue(l=40, c=35) +
labs(fill="Sucessful prediction") +
facet_grid(cols=vars(test_type))
ggplot(vbench, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red", "green")) +
scale_fill_hue(l=80, c=35) +
labs(fill="Sucessful prediction") +
facet_grid(cols=vars(test_type))
ggplot(vbench, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red", "green"), l=40, c=35) +
labs(fill="Sucessful prediction") +
facet_grid(cols=vars(test_type))
ggplot(vbench, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("chartreuse4", "green"), l=40, c=35) +
labs(fill="Sucessful prediction") +
facet_grid(cols=vars(test_type))
ggplot(vbench, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("chartreuse4", "green")) +
labs(fill="Sucessful prediction") +
facet_grid(cols=vars(test_type))
ggplot(vbench, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("chartreuse4", "chartreuse4")) +
labs(fill="Sucessful prediction") +
facet_grid(cols=vars(test_type))
ggplot(vbench, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red4", "chartreuse4")) +
labs(fill="Sucessful prediction") +
facet_grid(cols=vars(test_type))
ggplot(vbench, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red4", "chartreuse4")) +
labs(fill="Sucessful prediction", x="Best predicted instance", y="Count") +
facet_grid(cols=vars(test_type))
score_means
library(ggplot2)
logs <- read.csv("vbench_results.csv")
logs$instance <- as.factor(logs$instance)
instance_types <- levels(logs$instance)
remove_square_brackets <- function(string, edge_length=1) {
return(substr(string, 1+edge_length, nchar(string)-(edge_length)))
}
logs$cpu <- vapply(as.character(logs$cpu), function(x) return(strtoi(remove_square_brackets(x))), c(1))
google_logs = logs[logs$provider == "['google']",]
aws_logs = logs[logs$provider == "['aws']",]
levels(logs$provider) <- c("Amazon EC2", "Google Compute Engine")
ns <- c()
## Score
score_means = c()
score_sds = c()
score_relsds = c()
### Score/price
value_means = c()
value_sds = c()
value_relsds = c()
for (i in instance_types) {
print(i)
ns <- c(ns, nrow(logs[logs$instance==i,]))
s_mean <- mean(logs[logs$instance==i,]$score)
s_sd <- sd(logs[logs$instance==i,]$score)
print(paste("Mean:", s_mean))
score_means <- c(score_means, s_mean)
print(paste("SD:", s_sd))
print(paste("n:", nrow(logs[logs$instance==i,])))
score_sds <- c(score_sds, s_sd)
score_relsds <- c(score_relsds, s_sd/s_mean)
qqnorm(logs[logs$instance==i,]$score, main=i)
# print(shapiro.test(logs[logs$instance==i,]$score))
v_mean <- mean(logs[logs$instance==i,]$value)
v_sd <- sd(logs[logs$instance==i,]$value)
print(paste("Mean:", v_mean))
value_means <- c(value_means, v_mean)
print(paste("SD:", v_sd))
value_sds <- c(value_sds, v_sd)
value_relsds <- c(value_relsds, v_sd/v_mean)
}
names(score_means) <- instance_types
names(score_sds) <- instance_types
names(score_relsds) <- instance_types
names(value_means) <- instance_types
names(value_sds) <- instance_types
names(value_relsds) <- instance_types
mod <- lm(score ~ instance, data=logs)
aov <- aov(mod)
score_means
value_means
6.349174 / 8.068429
1-0.7869158
0.2130842 * 8.068429
8.067429 - 1.719255
curl_test <- exps[exps$Deployer=="ping_testserver",]
View(curl_test)
logs <- read.csv("curltest_results.csv")
logs$instance <- as.factor(logs$instance)
instance_types <- levels(logs$instance)
remove_square_brackets <- function(string, edge_length=1) {
return(substr(string, 1+edge_length, nchar(string)-(edge_length)))
}
logs$cpu <- vapply(as.character(logs$cpu), function(x) return(strtoi(remove_square_brackets(x))), c(1))
google_logs = logs[logs$provider == "['google']",]
aws_logs = logs[logs$provider == "['aws']",]
levels(logs$provider) <- c("Amazon EC2", "Google Compute Engine")
ns <- c()
## Score
score_means = c()
score_sds = c()
score_relsds = c()
### Score/price
value_means = c()
value_sds = c()
value_relsds = c()
for (i in instance_types) {
print(i)
ns <- c(ns, nrow(logs[logs$instance==i,]))
s_mean <- mean(logs[logs$instance==i,]$score)
s_sd <- sd(logs[logs$instance==i,]$score)
print(paste("Mean:", s_mean))
score_means <- c(score_means, s_mean)
print(paste("SD:", s_sd))
print(paste("n:", nrow(logs[logs$instance==i,])))
score_sds <- c(score_sds, s_sd)
score_relsds <- c(score_relsds, s_sd/s_mean)
qqnorm(logs[logs$instance==i,]$score, main=i)
# print(shapiro.test(logs[logs$instance==i,]$score))
v_mean <- mean(logs[logs$instance==i,]$value)
v_sd <- sd(logs[logs$instance==i,]$value)
print(paste("Mean:", v_mean))
value_means <- c(value_means, v_mean)
print(paste("SD:", v_sd))
value_sds <- c(value_sds, v_sd)
value_relsds <- c(value_relsds, v_sd/v_mean)
}
names(score_means) <- instance_types
names(score_sds) <- instance_types
names(score_relsds) <- instance_types
names(value_means) <- instance_types
names(value_sds) <- instance_types
names(value_relsds) <- instance_types
mod <- lm(score ~ instance, data=logs)
aov <- aov(mod)
TukeyHSD(aov)
mod2 <- lm(score ~ as.factor(cpu)*provider*type, logs)
aov2 <- aov(mod2)
TukeyHSD(aov2)
mod.value <- lm(value ~ instance, data=logs)
aov.value <- aov(mod.value)
TukeyHSD(aov.value)
mod.value2 <- lm(value ~ as.factor(cpu)*provider*type, logs)
aov.value2 <- aov(mod.value2)
TukeyHSD(aov.value2)
ggplot(logs, aes(score)) +
geom_histogram() +
facet_wrap(~instance)
ggplot(logs, aes(as.factor(cpu), score, color=provider)) +
geom_boxplot() +
xlab("vCPU #") + ylab("vBench Score") +
labs(title="vBench scores for different cloud configurations", color="Provider") +
facet_grid(cols=vars(type))
mod.value <- lm(value ~ instance, data=logs)
aov.value <- aov(mod.value)
TukeyHSD(aov.value)
ggplot(logs, aes(as.factor(cpu), value, color=provider)) +
geom_boxplot() +
xlab("vCPU #") + ylab("Score/Price") +
labs(title="Objective function result (vBench score / price per hour) for different cloud configurations",
color="Provider") +
facet_grid(cols=vars(type), scales="free_y")
mean_values
value_means
0.026615321-0.026718180
