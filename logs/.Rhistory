"Ping test, 1 concurrent job, multiple providers"))
ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion of mean from potential best machine", fill = "Test Type")
exps <- read.csv("exps_results.csv")
exps$single_concurrent <- exps$Concurrent_Jobs == 1
exps$success <- ifelse(exps$Multiple_Providers == "True", exps$Best_instance=="c5.large", exps$Best_instance=="n1-highcpu-2")
exps$success <- ifelse(exps$Deployer == "ping_testserver", (exps$Best_instance == "c5.large" | exps$Best_instance == "m5.large"), exps$success)
# Getting test type:
test_types <- vector(mode="character", length=nrow(vbench))
for (i in 1:nrow(exps)) {
if (exps$Deployer[i] == "ping_testserver") {
test_types[i] <- "Ping test, 1 concurrent job, multiple providers"
}
else if (exps$Concurrent_Jobs[i] == 2) {
test_types[i] <- "Multiple providers, 2 concurrent jobs"
} else {
if (exps$Multiple_Providers[i] == "True") {
if (exps$single_concurrent[i]) {
test_types[i] <- "Multiple providers, single job"
} else {
test_types[i] <- "Multiple providers, 3 concurrent jobs"
}
} else {
if (exps$single_concurrent[i]) {
test_types[i] <- "Single provider, single job"
} else {
test_types[i] <- "Single provider, 3 concurrent jobs"
}
}
}
}
exps$test_type <- factor(test_types, levels=c("Single provider, single job",
"Single provider, 3 concurrent jobs",
"Multiple providers, single job",
"Multiple providers, 2 concurrent jobs",
"Multiple providers, 3 concurrent jobs",
"Ping test, 1 concurrent job, multiple providers"))
best_result_mean <- mean(exps$Best_Result[exps$Best_instance == "c5.large" & exps$Deployer == "vbench"])
best_result_mean.google <- mean(exps$Best_Result[exps$Best_instance=="n1-highcpu-2" & exps$Deployer == "vbench"])
best_result_mean.curltest <- mean(exps$Best_Result[exps$Deployer == "ping_testserver"])
exps$Best_Result_Relative <- ifelse(exps$Multiple_Providers == "True",
exps$Best_Result/best_result_mean,
exps$Best_Result/best_result_mean.google)
exps$Best_Result_Relative <- ifelse(exps$Deployer == "ping_testserver",
exps$Best_Result/best_result_mean.curltest,
exps$Best_Result_Relative)
vbench <- exps[exps$Deployer=="vbench",]
curl_test <- exps[exps$Deployer=="ping_testserver",]
library(dplyr)
library(ggplot2)
ggplot(exps, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red4", "chartreuse4")) +
labs(fill="Sucessful prediction", x="Best predicted instance", y="Count") +
facet_grid(cols=vars(test_type))
ggplot(exps, aes(test_type, -Best_Result, group=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3)
ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion of mean from potential best machine", fill = "Test Type")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion of mean from potential best machine", fill = "Test Type")
exps <- read.csv("exps_results.csv")
exps$single_concurrent <- exps$Concurrent_Jobs == 1
exps$success <- ifelse(exps$Multiple_Providers == "True", exps$Best_instance=="c5.large", exps$Best_instance=="n1-highcpu-2")
exps$success <- ifelse(exps$Deployer == "ping_testserver", (exps$Best_instance == "c5.large" | exps$Best_instance == "m5.large"), exps$success)
# Getting test type:
test_types <- vector(mode="character", length=nrow(vbench))
for (i in 1:nrow(exps)) {
if (exps$Deployer[i] == "ping_testserver") {
test_types[i] <- "Ping test, 1 concurrent job, multiple providers"
}
else if (exps$Concurrent_Jobs[i] == 2) {
test_types[i] <- "Multiple providers, 2 concurrent jobs"
} else {
if (exps$Multiple_Providers[i] == "True") {
if (exps$single_concurrent[i]) {
test_types[i] <- "Multiple providers, single job"
} else {
test_types[i] <- "Multiple providers, 3 concurrent jobs"
}
} else {
if (exps$single_concurrent[i]) {
test_types[i] <- "Single provider, single job"
} else {
test_types[i] <- "Single provider, 3 concurrent jobs"
}
}
}
}
exps$test_type <- factor(test_types, levels=c("Single provider, single job",
"Single provider, 3 concurrent jobs",
"Multiple providers, single job",
"Multiple providers, 2 concurrent jobs",
"Multiple providers, 3 concurrent jobs",
"Ping test, 1 concurrent job, multiple providers"))
best_result_mean <- mean(exps$Best_Result[exps$Best_instance == "c5.large" & exps$Deployer == "vbench"])
best_result_mean.google <- mean(exps$Best_Result[exps$Best_instance=="n1-highcpu-2" & exps$Deployer == "vbench"])
best_result_mean.curltest <- mean(exps$Best_Result[exps$Deployer == "ping_testserver"])
exps$Best_Result_Relative <- ifelse(exps$Multiple_Providers == "True",
exps$Best_Result/best_result_mean,
exps$Best_Result/best_result_mean.google)
exps$Best_Result_Relative <- ifelse(exps$Deployer == "ping_testserver",
exps$Best_Result/best_result_mean.curltest,
exps$Best_Result_Relative)
vbench <- exps[exps$Deployer=="vbench",]
curl_test <- exps[exps$Deployer=="ping_testserver",]
library(dplyr)
library(ggplot2)
ggplot(exps, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red4", "chartreuse4")) +
labs(fill="Sucessful prediction", x="Best predicted instance", y="Count") +
facet_grid(cols=vars(test_type))
ggplot(exps, aes(test_type, -Best_Result, group=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3)
ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion of mean from potential best machine", fill = "Test Type")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion of mean from potential best machine", fill = "Test Type")
exps <- read.csv("exps_results.csv")
exps$single_concurrent <- exps$Concurrent_Jobs == 1
exps$success <- ifelse(exps$Multiple_Providers == "True", exps$Best_instance=="c5.large", exps$Best_instance=="n1-highcpu-2")
exps$success <- ifelse(exps$Deployer == "ping_testserver", (exps$Best_instance == "c5.large" | exps$Best_instance == "m5.large"), exps$success)
# Getting test type:
test_types <- vector(mode="character", length=nrow(vbench))
for (i in 1:nrow(exps)) {
if (exps$Deployer[i] == "ping_testserver") {
test_types[i] <- "Ping test, 1 concurrent job, multiple providers"
}
else if (exps$Concurrent_Jobs[i] == 2) {
test_types[i] <- "Multiple providers, 2 concurrent jobs"
} else {
if (exps$Multiple_Providers[i] == "True") {
if (exps$single_concurrent[i]) {
test_types[i] <- "Multiple providers, single job"
} else {
test_types[i] <- "Multiple providers, 3 concurrent jobs"
}
} else {
if (exps$single_concurrent[i]) {
test_types[i] <- "Single provider, single job"
} else {
test_types[i] <- "Single provider, 3 concurrent jobs"
}
}
}
}
exps$test_type <- factor(test_types, levels=c("Single provider, single job",
"Single provider, 3 concurrent jobs",
"Multiple providers, single job",
"Multiple providers, 2 concurrent jobs",
"Multiple providers, 3 concurrent jobs",
"Ping test, 1 concurrent job, multiple providers"))
best_result_mean <- mean(exps$Best_Result[exps$Best_instance == "c5.large" & exps$Deployer == "vbench"])
best_result_mean.google <- mean(exps$Best_Result[exps$Best_instance=="n1-highcpu-2" & exps$Deployer == "vbench"])
best_result_mean.curltest <- mean(exps$Best_Result[exps$Deployer == "ping_testserver"])
exps$Best_Result_Relative <- ifelse(exps$Multiple_Providers == "True",
exps$Best_Result/best_result_mean,
exps$Best_Result/best_result_mean.google)
exps$Best_Result_Relative <- ifelse(exps$Deployer == "ping_testserver",
exps$Best_Result/best_result_mean.curltest,
exps$Best_Result_Relative)
vbench <- exps[exps$Deployer=="vbench",]
curl_test <- exps[exps$Deployer=="ping_testserver",]
library(dplyr)
library(ggplot2)
ggplot(exps, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red4", "chartreuse4")) +
labs(fill="Sucessful prediction", x="Best predicted instance", y="Count") +
facet_grid(cols=vars(test_type))
ggplot(exps, aes(test_type, -Best_Result, group=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3)
ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion of mean from potential best machine", fill = "Test Type")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion of mean from potential best machine", fill = "Test Type")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type")
ggplot(exps, aes(test_type, Cost, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type")
ggplot(exps, aes(test_type, Jobs_completed, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type")
ggplot(exps, aes(test_type, Cost, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type")
exps
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type")
ggplot(vbench, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type")
ggplot(vbench, aes(test_type, Cost, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type")
ggplot(vbench, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type")
ggplot(exps, aes(test_type, Cost, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type")
ggplot(exps, aes(test_type, Cost, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type")
exps$cost_scale = scale(cost)
exps$cost_scale = scale(exps$cost)
exps$cost_scale = scale(exps$Cost)
exps$cost_scale
ggplot(exps, aes(test_type, cost_scale, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Relative search cost", fill = "Test Type")
exps$cost_scale = scale(exps$Cost, 0)
ggplot(exps, aes(test_type, cost_scale, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Relative search cost", fill = "Test Type")
ggplot(exps, aes(test_type, Cost, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Relative search cost", fill = "Test Type")
ggplot(exps, aes(test_type, cost_scale, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Relative search cost", fill = "Test Type")
ggplot(exps, aes(test_type, cost_scale, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Relative estimated search cost", fill = "Test Type")
ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion of mean from potential best machine", fill = "Test Type",
title = "Boxplots of the best relative objective function\n values returned for different Bayesian Optimization searches")
ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion of mean from potential best machine", fill = "Test Type",
title = "Boxplots of the best relative objective function\nvalues returned for different Bayesian Optimization searches")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type",
title = "Boxplots of time-taken for different \nBayesian Optimization searches")
exps$cost_scale = scale(exps$Cost, 0)
ggplot(exps, aes(test_type, cost_scale, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Relative estimated search cost", fill = "Test Type",
title = "Boxplots of relative search cost for \n different Bayesian Optimization searches")
ggplot(exps, aes(test_type, cost_scale, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Relative estimated search cost", fill = "Test Type",
title = "Boxplots of relative search cost for \ndifferent Bayesian Optimization searches")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type",
title = "Boxplots of time-taken for different \nBayesian Optimization searches")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot(outlier.size=NA) +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type",
title = "Boxplots of time-taken for different \nBayesian Optimization searches")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot(outlier.shape=NA) +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type",
title = "Boxplots of time-taken for different \nBayesian Optimization searches")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type",
title = "Boxplots of time-taken for different \nBayesian Optimization searches")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
coord_cartesian(ylim=c(0, 2000)) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type",
title = "Boxplots of time-taken for different \nBayesian Optimization searches")
ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
coord_cartesian(ylim=c(0, 2000)) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type",
title = "Boxplots of time taken for different \nBayesian Optimization searches")
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
library(ggpubr)
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
install.packages("ggpubr")
library(ggpubr)
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
results.plot <- ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion of mean from potential best machine", fill = "Test Type",
title = "Boxplots of the best relative objective function\nvalues returned for different Bayesian Optimization searches")
time.plot <- ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
coord_cartesian(ylim=c(0, 2000)) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between start of first and last job", fill = "Test Type",
title = "Boxplots of time taken for different \nBayesian Optimization searches")
exps$cost_scale = scale(exps$Cost, 0)
cost.plot <- ggplot(exps, aes(test_type, cost_scale, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Relative estimated search cost", fill = "Test Type",
title = "Boxplots of relative search cost for \ndifferent Bayesian Optimization searches")
library(ggpubr)
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
results.plot <- ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion \nof mean from potential best machine", fill = "Test Type",
title = "Boxplots of the best relative objective function\nvalues returned for different Bayesian Optimization searches")
time.plot <- ggplot(exps, aes(test_type, Time, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
coord_cartesian(ylim=c(0, 2000)) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Time in seconds between \nstart of first and last job", fill = "Test Type",
title = "Boxplots of time taken for different \nBayesian Optimization searches")
exps$cost_scale = scale(exps$Cost, 0)
cost.plot <- ggplot(exps, aes(test_type, cost_scale, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Relative estimated search cost", fill = "Test Type",
title = "Boxplots of relative search cost for \ndifferent Bayesian Optimization searches")
exps.summ <- exps %>% group_by(test_type) %>% summarise(mean_rel_result = mean(Best_Result_Relative),
sd_rel_result = sd(Best_Result_Relative),
n_samples = n(),
ci95 = qt(0.975,df=n_samples-1)*sd_rel_result/sqrt(n_samples))
library(ggpubr)
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
results.plot <- ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion \nof mean from potential best machine", fill = "Test Type",
title = "Boxplots of the best values returned \nfor different Bayesian Optimization searches")
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
results.plot <- ggplot(exps, aes(test_type, Best_Result_Relative, group=test_type, fill=test_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, colour="darkblue", geom="point",
shape=18, size=3) +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
labs(y = "Best returned result as a proportion \nof mean from potential best machine", fill = "Test Type",
title = "Boxplots of best values returned \nfor different Bayesian Optimization searches")
ggarrange(results.plot + rremove("legend"),
time.plot + rremove("legend"),
cost.plot +rremove("legend"),
cowplot::get_legend(results.plot),
labels=c('A', 'B', 'C'))
ggplot(exps, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red4", "chartreuse4")) +
labs(fill="Sucessful prediction", x="Best predicted instance", y="Count") +
facet_grid(cols=vars(test_type))
ggplot(exps, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red4", "chartreuse4")) +
labs(fill="Sucessful prediction", x="Best predicted instance", y="Count") +
facet_wrap(~vars(test_type))
ggplot(exps, aes(Best_instance)) +
geom_bar(aes(fill=success)) +
scale_fill_manual(values=c("red4", "chartreuse4")) +
labs(fill="Sucessful prediction", x="Best predicted instance", y="Count") +
facet_wrap(~test_type)
